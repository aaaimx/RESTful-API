(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{761:function(e,t,s){"use strict";s.r(t);var r=s(70),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"resource-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#resource-structure"}},[e._v("#")]),e._v(" Resource Structure")]),e._v(" "),s("p",[e._v("In REST, the data we are handling is called a "),s("strong",[e._v("resource")]),e._v(".\nFollowing a consistent naming convention makes your API easier to use. It is important to follow a correct structure for our resources.")]),e._v(" "),s("blockquote",[s("p",[e._v("Resourse can be a Singleton or a Collection.")])]),e._v(" "),s("p",[e._v("For example, a "),s("strong",[e._v("user")]),e._v(" is a singleton , but "),s("strong",[e._v("users")]),e._v(" is a collection. So, we can identify a collection resource by/"),s("strong",[e._v("users")]),e._v(" URI. However, for a singleton resource, the  URI will become: "),s("strong",[e._v("/users/{userID}")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"sub-collection-resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sub-collection-resources"}},[e._v("#")]),e._v(" sub-collection resources")]),e._v(" "),s("p",[e._v("Let's imagine a sub-collection "),s("strong",[e._v("codes")]),e._v(" of a unique "),s("strong",[e._v("user")]),e._v(": "),s("strong",[e._v("/users/{userID}/codes")]),e._v(" Just like in the example above, a singleton code URI will become")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/users/{userID}/codes/{codeID}\n")])])]),s("blockquote",[s("p",[e._v("This generally refers to the "),s("RouterLink",{attrs:{to:"/rest/en/2.REST_Architectural_Constraint.html"}},[e._v("uniform Interface")]),e._v(" constraint, where the same pattern repeats over the whole API.")],1)])])}),[],!1,null,null,null);t.default=o.exports}}]);